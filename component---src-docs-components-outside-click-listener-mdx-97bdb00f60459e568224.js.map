{"version":3,"sources":["webpack:///../src/docs/components/OutsideClickListener.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","OutsideClickListenerPropsComponent","parentName","isMDXComponent"],"mappings":"oQASaA,G,UAAe,S,8NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,iIACA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOC,GAAIC,IAAoCF,QAAQ,UACvD,iBAAQ,CACN,GAAM,SADR,SAGA,+QAGA,8BACE,iBAAGG,WAAW,cAAd,+DAA2F,0BAAYA,WAAW,KAAvB,aAA3F,2BAA4K,0BAAYA,WAAW,KAAvB,SAA5K,aAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2b,4NAwBTN,EAAWO,gBAAiB","file":"component---src-docs-components-outside-click-listener-mdx-97bdb00f60459e568224.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/kwc/kwc/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Props } from 'docz';\nimport { OutsideClickListener } from 'kwc';\nimport { OutsideClickListenerPropsComponent } from './MDXComponents.tsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"outsideclicklistener\"\n    }}>{`OutsideClickListener`}</h1>\n    <p>{`OutsideClickListener component allows the detection of clicks outside the components rendered within it.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={OutsideClickListenerPropsComponent} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`This component is commonly used when we want to listen for click outside a temporal component\nwhich will be closed when the event occurs, but it can be use to handle any situation that depends\non clicking outside the children of this component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can set mousedown prop to true if you want to listen to `}<inlineCode parentName=\"p\">{`mousedown`}</inlineCode>{` events instead of only `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{` events.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function Component() {\n  const [visible, setVisible] = useState(false);\n\n  const showComponent = () => setVisible(true);\n  const hideComponent = () => setVisible(false);\n\n  return (\n    <div>\n      <div onClick={showComponent}>SHOW!</div>\n      {visible && (\n        <OutsideClickListener onClickOutside={hideComponent}>\n          <div>Some children</div>\n        </OutsideClickListener>\n      )}\n    </div>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}